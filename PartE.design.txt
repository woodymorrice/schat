# CMPT332 - Group 14
# Phong Thanh Nguyen (David) - wdz468 - 11310824
# Woody Morrice - wam553 - 11071060

# Design Documentation for Part E

# Work Plan
Woody and David will collaborate on the design and implementation
for part E.

# Design Details
xv6 will take the integer mask and save it into a variable in the
current process. Fork will copy that variable to any children. Each
time a system call is returns, if the value of the trace mask
variable is greater than zero xv6 will check the bitmask, and for
each system call that has a corresponding "1" in the bitmask it
will check if that system call is returning. If it is, xv6 will
print to the console its pid, its name, and the integer value it
is returning.

# Implementation Details
sys_trace in sysproc.c will store the integer argument in an integer
variable called tmask in the current processes proc structure using
argint(). Fork will copy that variables value to every child of the
current process that it creates. 
The syscall function will do all the computation. Before it does
anything else, it will check that tmask is greater than zero. It will
then loop through each bit of tmask, isolating it using bitwise AND
and a bit-shifted 1. If the base-10 value of that bit is non-zero,
the position of that bit (i in the loop) will be checked against the
num variable (indicates which system call is returning), and if they
are the same, that is one of the system calls that is being traced,
and the trace output is printed. An array of character pointers will
be used to store the names of each system call for printing.

