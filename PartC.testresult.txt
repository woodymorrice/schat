CMPT332 - Group 14
Phong Thanh Nguyen (David) - wdz468 - 11310824
Woody Morrice - wam553 - 11071060



testList: ListCreate():
 passed!
testList1: ListCreate():
 passed!
testList2: ListCreate():
 passed!
testList3: ListCreate():
 passed!


Begin testing ListAdd() when currentPointer is at tail.

testList: ListAdd() adding 1st item return:
 passed!
testList: ListAdd(), head and tail preference:
 passed!
testList: ListAdd(), checking current preference:
 passed!
testList: (1st) dataType return correct.
 passed!
testList: (1st) check totalItem return value:
 passed!
testList: ListAdd() adding 2nd item return:
 passed!
testList (2nd): ListAdd(), head and tail preference:
 passed!
testList (2nd): ListAdd(), checking current preference:
 passed!
testList: (2nd) dataType return correct.
 passed!
testList: (2nd) check totalItem return value:
 passed!
testList3: ListAdd() adding 3rd item return:
 passed!
testList (3rd): ListAdd(), head and tail preference:
 passed!
testList (3rd): ListAdd(), checking current preference:
 passed!
testList: (3rd) dataType return correct.
 passed!
testList: (3rd) check totalItem return value:
 passed!


Testing ListAdd() when the currentPointer at head
Or at other position, such as middle

testList: ListAdd() adding 4th item return:
 passed!
testList (4th): ListAdd(), head and tail preference:
 passed!
testList (4th): ListAdd(), checking current preference:
 passed!
testList: (4th) dataType return correct.
 passed!
testList: (4th) check totalItem return value:
 passed!
testList: ListAdd() adding 5th item return:
 passed!
testList (5th): ListAdd(), head and tail preference:
 passed!
testList (5th): ListAdd(), checking current preference:
 passed!
testList1: (5th) dataType return correct.
 passed!
testList: (5th) check totalItem return value:
 passed!
testList: ListAdd() adding 6th item return:
 passed!
testList (6th): ListAdd(), head and tail preference:
 passed!
testList (6th): ListAdd(), checking current preference:
 passed!
testList1: (6th) dataType return correct.
 passed!
testList: (6th) check totalItem return value:
 passed!


Testing ListRemove()

testList1: ListRemove() remove an item in empty list
 passed!
testList1: ListAdd() adding 1st item return:
 passed!
testList1: ListAdd(), head and tail preference:
 passed!
testList1: ListAdd(), checking current preference:
 passed!
testList1: (1st) dataType return correct.
 passed!
testList1: (1st) check totalItem return value:
 passed!
testList: ListRemove(), current return after remove
 passed!
testList1: ListRemove(), return correct when remove head
 passed!
testList1: ListRemove(), total item return
 passed!
testList: ListRemove(), check head and tail
 passed!
testList1: ListAdd() adding 1st item return:
Adding another item after first remove
 passed!
testList1 (2nd): ListAdd(), head and tail preference:
 passed!
testList1 (2nd): ListAdd(), checking current preference:
 passed!
testList1: (2nd) dataType return correct.
 passed!
testList1: (2nd) check totalItem return value:
 passed!
testList1 (3rd): ListAdd() adding 2nd item return:
 passed!
testList1 (3rd): ListAdd(), head and tail preference:
 passed!
testList1 (3rd): ListAdd(), checking current preference:
 passed!
testList1: (3rd) dataType return correct.
 passed!
testList1: (3rd) check totalItem return value:
 passed!


Testing ListRemove() on testList with different scenarioes

testList: ListRemove(), current before test return correct
 passed!
testList: ListRemove(), return correct when remove head
 passed!
testList: ListRemove(), checking new current position
 passed!
testList: ListRemove(), total item return
 passed!
testList: ListRemove(), new head preference
 passed!
testList: ListRemove(), new head data return
 passed!
testList: ListRemove(), successfully remove old head
 passed!
testList (2nd): ListRemove(), current return correct
Remove the 2nd head in the sequence
 passed!
testList (2nd): ListRemove(), return correct data
 passed!
testList (2nd): ListRemove(), current at head
 passed!
testList (2nd): ListRemove(), total item return
 passed!
testList (2nd): ListRemove(), new head preference
 passed!
testList (2nd): ListRemove(), new head data return
 passed!
testList (2nd): ListRemove(), successfully remove head
 passed!
testList (3rd): ListRemove(), current return correct
Remove tail
 passed!
testList (3rd): ListRemove(), return correct data
 passed!
testList (3rd): ListRemove(), current at tail
 passed!
testList (3rd): ListRemove(), total item return
 passed!
testList (3rd): ListRemove(), new tail preference
 passed!
testList (3rd): ListRemove(), new tail data return
 passed!
testList (3rd): ListRemove(), successfully remove tail
 passed!
testList (4th): ListRemove(), current return correct
Remove tail
 passed!
testList (4th): ListRemove(), return correct data
 passed!
testList (4th): ListRemove(), current at tail
 passed!
testList (4th): ListRemove(), total item return
 passed!
testList (4th): ListRemove(), new tail preference
 passed!
testList (4th): ListRemove(), new tail data return
 passed!
testList (4th): ListRemove(), successfully remove tail
 passed!


Testing ListAppend() on testList

testList: ListAppend() adding 1st item 'int'
 passed!
testList: ListAppend(), checking current head and tail
 passed!
testList: ListAppend(), check current preference
 passed!
testList: ListAppend() dataType return correct.
 passed!
testList: ListAppend() totatlItem return correct
 passed!
testList (2nd): ListAppend() adding 2nd item 'int'
 passed!
testList (2nd): ListAppend(), checking current head and tail
 passed!
testList (2nd): ListAppend(), check current preference
 passed!
testList (2nd): ListAppend() dataType return correct.
 passed!
testList (2nd): ListAppend() totatlItem return correct
 passed!


Testing ListPrepend() on testList

testList: ListPrepend() adding 1st item 'int'
 passed!
testList: ListPrepend(), checking current head and tail
 passed!
testList: ListPrepend(), check current preference
 passed!
testList: ListPrepend() dataType return correct.
 passed!
testList: ListPrepend() totatlItem return correct
 passed!
testList (2nd): ListPrepend() adding 2nd item 'int'
 passed!
testList (2nd): ListPrepend(), checking current head and tail
 passed!
testList (2nd): ListPrepend(), check current preference
 passed!
testList (2nd): ListPrepend() dataType return correct.
 passed!
testList (2nd): ListPrepend() totatlItem return correct
 passed!


Testing ListInsert() on testList2

testList2: ListInsert() adding 2nd item 'char'
Adding first item for an empty list passed!
testList2: ListPrepend(), checking current head and tail
 passed!
testList2: ListInsert(), check current preference
 passed!
testList2: ListInsert() dataType return correct.
 passed!
testList2: ListInsert() totatlItem return correct
 passed!
testList2: ListInsert() adding 2nd item 'char'
Adding 2nd item for list that has 1 item
 passed!
testList2: ListInsert(), checking current head and tail
 passed!
testList2: ListInsert(), check current preference
 passed!
testList2: ListInsert() dataType return correct.
 passed!
testList2: ListInsert() totatlItem return correct
 passed!
testList2: ListInsert() adding 2nd item 'char'
Insert item for a list which is in middle
 passed!
testList2: ListInsert(), checking current head and tail
 passed!
testList2: ListInsert(), check current preference
 passed!
testList2: ListInsert() dataType return correct.
 passed!
testList2: ListInsert() totatlItem return correct
 passed!
testList2 (2nd): ListInsert() adding 2nd item 'char'
Insert item for a list which is in middle passed!
testList2 (2nd): ListInsert(), checking current head and tail
 passed!
testList2 (2nd): ListInsert(), check current preference
 passed!
testList2 (2nd): ListInsert() dataType return correct.
 passed!
testList2 (2nd): ListInsert() totatlItem return correct
 passed!


Testing for ListSearch() on testList2

testList2: ListSearch() checking return value: 'g'
 passed!
testList2: ListSearch() checking return value: 'd'
 passed!
testList2: ListSearch() checking return value: 'i'
Testing when 'i' is not in the list
 passed!


Testing ListConcat() on testList1 and testList2

testList1 and testList2: ListConcat()
Checking heead pointer of testList 1 
 passed!
testList1 and testList2: ListConcat()
testList1 return totalItem correct
 passed!
testList1 and testList2: ListConcat()
New tail obtained from the combined list
 passed!


Testing ListTrim() on testList1

testList1: ListTrim() return correct 'd' deleted dataType
 passed!
testList1: ListTrim() return total item correct
 passed!
testList1: ListTrim() obtain new tail successfully
 passed!
testList1: ListTrim() return correct 'g' deleted dataType
 passed!
testList1 (2): ListTrim() return total item correct
 passed!
testList1 (2): ListTrim() obtain new tail successfully
 passed!


Testing ListFree() on testList and testList1

testList1: ListFree() free 'char' item
 passed!
testList1: ListFree() free 'int' item
 passed!
