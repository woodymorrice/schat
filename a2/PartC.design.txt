* CMPT332 - Group 14
* Phong Thanh Nguyen (David) - wdz468 - 11310824
* Woody Morrice - wam553 - 11071060

**********
* S-Chat *
**********

** Design Details **
Our solution will consist of 6 functions as outlined in the
assignment specification. The mainp() function will initialize
the five necessary threads. ALL thread functions run on an
infinite loop.

The first thread will run the function sGetInput(), which waits
for user input and scans user input into a string buffer, limiting
the user to 126 characters, leaving room for a newline character
and a tombstone. Then it sends a message to the server containing
the string held in the buffer and waits for a reply. If the server
returns a failure message, sGetInput should emit a message
indicating that the list is full.

The second thread runs sServer(), which receives messages, acts on
those messages, and sends replies to the other threads. When it
receives a message from sGetInput there are three possibilites:
The message is an exit command, in which case the server should
kill all the other threads and exit. The incoming list is full,
in which case the server should reply with a failure message.
Otherwise, it should reply with a success message.
When it receives a messages from sSendData() it should either
reply with a failure message if the outgoing list is empty, or
reply with the first string in the outgoing list.
When it receives a message from sGetData() it should reply with
a failure message if the list is full, otherwise it should add
the received string to the list of incoming messages.
When it receives a messages from sDisplayData() it should send
a failure message if the outgoing list is empty, otherwise it
should send the first string in the outgoing list.

The third thread runs sSendData() which send a message to the
server indicating that it is waiting for a string to send,
and upon receiving a reply, it either re-commences its loop
on a failure reply, or takes the string from the received
message, encodes it to a universal format, and sends it via
UDP to the remote UNIX processes that were specified by IP
and port at runtime.

The fourth thread runs sGetData(), which listens on the specified
port for UDP packets, and retrieves them. It then 
decodes the content of the message into the appropriate format for
the local machine, and sends a message containing the resulting
string to sServer() to add to the list of incoming messages. If
the server replies with a failure messages, the incoming list is
full, and sGetData() should emit an error message indicating as
such.

The fifth thread runs sDisplayData(), which sends a message to 
the server indicating that it is waiting, and upon reply,
either prints the message to the local console, or does nothing
if the server indicates that the incoming list is empty.


** Pseudocode **

mainp()
    initialize threads

sGetInput()
    get server pid
    infinite loop:
    wait for input from keyboard
        if input
            read input into buffer until newline
            send message to server with buffer contents
            if reply = failure
                emit list full message

sServer()
    get pids for the other threads
    infinite loop:
    wait for messages
        if message received from sGetInput()
            if string is exit command
                kill all threads
            if outgoing list is full
                reply that the list is full(failure)
            else
                add string to list
                reply success

        if message received from sSendData()
            if outgoing list is empty
                reply list is empty
            else
                send first string in list

        if message received from sGetData()
            if incoming list is full
                reply that the list is full(failure)
            else
                add string to list
                reply success
        
        if message received from sDisplayData()
            if outgoing list is empty
                reply list is empty
            else
                send first string in list

sSendData()
    get server pid
    infinite loop:
    send waiting message to server
        if reply not list empty
            convert message data to universal type
            transmit data over UDP

sGetData()
    get server pid
    infinite loop:
    listen on port for datagram
        if datagram received
            convert data(string) to local type
            send message server containing string
            if reply = failure
                emit list full message

sDisplayData()
    get server pid
    infinite loop:
    send waiting message to server
        if reply not list empty
            display message string on local console

