* CMPT332 - Group 14
* Phong Thanh Nguyen (David) - wdz468 - 11310824
* Woody Morrice - wam553 - 11071060

**********
* S-Chat *
**********

** Design Details **
Our solution consists of 6 thread functions as outlined in the
assignment specification, and some additional helper functions to
improve code readability. Threads implement ubc pthreads IPC to
communicate. Each call to Send(), Receive() and Reply() is checked
for errors to ensure proper communication. The unix networking API
is used for network communication, and the program includes rigorous
error checking for each function called (which made debugging a
breeze).

The mainp() function initializes the
necessary threads and stores command line arguments (host names,
port numbers) in a global variables so they can be accessed by any
thread or function that needs them. Thread PIDs are recorded in
global variables so MyPid() never needs to be called and the server
will always know what thread it is communicating with.

The first thread runs the function sGetInput(), which sets stdin to
non blocking and reads console input in a loop. Messages are recorded
(up to 255 bytes) into a bounded buffer, a tombstone is appended,
and the message is sent using the ubc pthreads IPC function to the
server. If the user enters "exit" or "quit", necessary file descriptors
are set back to blocking and the program exits.

The second thread runs sServer(). The server receives messages and
sends replies, manages lists of incoming and outgoing messages, and
initializes the network socket. The reason the server initializes
the socket is because it is the first thread that is created,
ensuring that the socket is available when other threads need to
use it. After calling the prepSocket() function and initializing the
two lists, the server enters its loop. The server receives a message,
and checks the sender.

If the sender is sGetInput() the server takes
the message it received and adds it to the list of outgoing messages
(if the list is not full) and gives a standard reply. Then a boolean
indicating whether sSendData() is waiting is checked, and if it is
(and the list of outgoing messages is not empty) it sends the message
that has been waiting on the the list of outgoing messages the longest
in its reply to sSendData(), and sets the boolean to false.

If the sender is sSendData(), it sets its waiting boolean to true
and does not reply. The logic behind this is that each time the 
server receives a new outgoing message, it checks whether sSendData()
is waiting, and gives it a message if it is. So there should never be
a situation where the server receives a new message and sSendData()
is left waiting.

For the other two possible senders, the server works exactly the
same way. If the sender is sGetData(), the server does all the same
steps as it would with sGetInput() (but with a list of incoming
messages instead), except in this case it checks if
sDisplayData() is waiting instead.

The third thread runs sSendData() which gathers the necessary data
about the other members of the chat, packs datagrams and send them
off. First it populates an array of sockaddr_in by gathering all the
necessary information about the other chat participants (specified
in the command line arguments). Then it commmences its loop where
it notifies the server that it is waiting for a message to send,
and upon receiving a reply, it takes the string and calls packDgram()
to package it up with the current date/time information. It then
polls the socket to see if it can send, and sends the datagram off
to each other member of the chat using sendto() from the unix 
networking library. 

The fourth thread runs sGetData(), which receives datagrams and
sends them to the server. In a loop it polls the socket for incoming
datagrams, and when a packet is available it allocates space in a
buffer and loads it in. Then it sends a pointer to the datagram to
the server.

The fifth thread runs sDisplayData(), which sends a message to 
the server indicating that it is waiting, and upon reply, it uses
the function printTime() to display the time information contained
in the datagram in a nice format, then prints the string contained
in the datagram. After the message has been displayed, sDisplayData()
free()'s the pointer.

The function packDgram() allocates space for a datagram before it
packs it, so sSendData() must free that space after the datagram is
sent. packDgram() also converts the time data to network byte order

The actual time information that is sent over the network is just
the tv_sec field of the timeval struct. The microseconds don't
change the time displayed in any meaningful way so that field is not
necessary. The printTime() function takes the information stored in
the tv_sec field, converts it to host byte order, and packs it into
a tm struct using localtime() which allows the date and time to be 
easily displayed in any format I like with strftime(). The
tm struct created by localtime() is statically allocated so it does
not need to be freed, and according to the man page the function reuses
that space each time its called (it's memory environmentally friendly).


** Pseudocode **

mainp()
    store command line arguments
    initialize threads

sGetInput()
    unblock stdin
    infinite loop:
    wait for input from keyboard
        if input is exit command
            block necessary file descriptors
            exit
        else
            add tombstone
            send message to server with buffer contents

sServer()
    initialize lists
    prepare network socket
    infinite loop:
    wait for messages
        if message received from sGetInput()
            if outgoing list is not full
                add message to outgoing list
            if sSendData() is waiting
                reply with oldest message on outgoing list
                set sendWaiting boolean to false

       if message received from sSendData()
            set sendWaiting boolean to true

       if message received from sGetData()
            if incoming list is not full
                add message to incoming list
            if sDisplayData is waiting
                reply with oldest message on incoming list
                set dispWaiting to false

sSendData()
    get destination(s) network info
    infinite loop:
    send waiting message to server
        when reply received
        poll socket
        when can send
            pack datagram
            send datagram to all recipients
            free datagram

sGetData()
    infinite loop:
    poll socket for incoming datagram
        when datagram available
        receive it
        send it to server

sDisplayData()
    infinite loop:
    send waiting message to server
        when reply received
        display time from datagram
        display message from datagram
        free datagram

