* CMPT332 - Group 14
* Phong Thanh Nguyen (David) - wdz468 - 11310824
* Woody Morrice - wam553 - 11071060


** Design Details **
File (monitor.c) will consists of 5 functions: 

MonInit() - will intialized all the needed condition queues, enter queue 
and urgent queue. Create the semaphore for each of the queue that exists. 

MonEnter() - check the mutex lock and decide whether the new thread is 
allow to enter. Function will return an integer value, 0 for success entering, 
otherwise return -1 for failure.  

MonLeave() - will responsible for releasing the mutex lock on the monitor, 
checking whether if there are any other waiting threads in urgent queue or 
enter queue and wake it up. Else if everything is empty, release the lock. 
Return 0 for success leaving, and -1 otherwise. 

MonWait(int CV) - making the current thread to wait on the condition queue.
Release the mutex lock so another thread can enter. The thread waiting on
condition queue will have no effect on the monitor, until another new thread
enters and wakes it up.

MonSignal(int CV) - waking up the waiting thread of that condition variable
in the condition queue. If there is thread waiting on that condition, the  
thread will be taken off the condition queue and put in the urgent queue. 
Now the monitor is only released when the thread in urgent queue leave the
monitor. Enforce the idea when the last person leave Saskatoon, turn off the 
light.  

** Changes make for the final phase **

Updated new list library from Joseph Medernach (imy309) and John Miler (knp254)

Updated functions description & pseudocode

Assume all the created thread will be at user-level threads. 

** Pseudocode **

int MonInit(int numConds) {
    create the condition queue based on the parameter
    for every condition queue
        create list storage for each condition queue
        create new semaphore by using RttNewSem()
    create list storage for enter queue
    create list storage for urgen queue
    create enter queue semaphore
    create urgent queue semaphore
    create a semaphore for mutex
    return 0 (on success) / -1 (on failure)
}

int MonEnter() {
    check if the mutex lock is released
    if (mutex is released) { 
        new thread is added to the enterq 
        update value of enterq semaphore
    } 
    else {
        let the new thread enter the monitor
        set the status of monitor to be occupied
    }
    return 0 (success) / -1 (on failure)
}
    
int MonLeave() {
    if (urgent queue is not empty) {
        take the waiting thread off 
        update value of urgentq semaphore
    }
    else if (enter queue is not empty){
        take the waiting thread off 
        update value of enterq semaphore
    }
    else {
        release the lock
        update the mutex semaphore
    }
    return 0 (leave success) / -1 (leave failure)
}

int MonWait(int CV) {
    make current thread wait on the CV 
    if (urgent queue is not empty) {
        take the waiting thread off the queue
        update value of condition queue semaphore
    }
    else if (enter queue is not empty) {
        take the waiting thread off 
        update the value of enter queue semaphore
    }
    else {
        release the lock 
    }
    update the value of the correspond condition queue
    return 0 (if the passed argument is valid) / -1 (otherwise) 
}

int  MonSignal(int CV) {
    if (no thread is waiting on CV) {
        do nothing
    }
    else {
        wake up the waiting thread of that CV
        update the value of CV queue semaphore
        put the current thread into the urgen queue
        update the value of urgent queue semaphore 
    }
    return 0 (if the passed in argument is valid) / -1 (otherwise)
}

