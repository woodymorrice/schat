Figure out: 
	- what .c file we need? 
	- what functions should be present in each .c files? 
A.1
window_square_int.c:
	- global keepRunning = False (to inform child threads whether to keep calling square() or not)
	-global (type) *counter[] = {&threadId}
	- Square(N) - compute square of positive int
		# cannot use any multiplication
		# count the number of time it is involved
		# goal: long time complete and a lot stack space 
	- n_child = number of child threads
	- d_line = how long the parent should sleep/delay (i guess, not sure about deadline)
	- parent_thread(int n_child, int d_line) - create n_child threads
		.system call "Sleep" - to make parent thread sleep until deadline after created n_child
		# Each child print after the exit: 
			- how long until exit
			- number of invocation of Square()  
		
	 
 B (shell script)
interactive menu - allow a user to provide argument until the end of file
or 
inputFile.txt - contains 3 integers / per line (for covenience use)
	# check for invalid input (negative numbers, strings, special characters, etc.)

C (Library)
Basically follow the syntax of functions as given in the description
Files needed: 

- list.h
	# structure definitions
	# function prototypes

- list_adders.c

- list_removers.c
	ListCurr()
	ListCount()

- mytestlist.c
	# main() -- only this file has main()
		% call the list library rountines to: 
			create list
			manipulate the list
		% show the details of an "item"
	# one line in Makefile (only 1 makefile for entire process) to run mytestlist.c

** ListFree & ListSearch (read syntax how to use a function as parameter)

